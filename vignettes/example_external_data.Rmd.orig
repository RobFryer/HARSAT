---
title: "External data"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{External data}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

This is a brief example of using the `harsat` with external
data.

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  error = TRUE
)
```

First, load the `harsat` library

```{r}
library(harsat)
```

And load the R package `here`, because we use the working directory to find
the data files. If you use your own data files, you will need to point to
a directory containing a copy.

```{r}
library(here)
working.directory <- here()
```

# Read data

Mercury data with supporting variables and station dictionary

```{r amap-biota}
biota_data <- read_data(
  compartment = "biota",
  purpose = "AMAP",
  contaminants = "EXTERNAL_FO_PW_DATA.csv",   # NB, replace biota data filename above, as appropriate 
  stations = "EXTERNAL_AMAP_STATIONS.csv",    # NB, replace station data filename above, as appropriate 
  data_dir = file.path(working.directory, "data", "example_external_data"),
  data_format = "external",
  info_dir = file.path(working.directory, "information", "AMAP"),
)
```

Note: in the above function, replace ‘control = list()’ with ‘control = list(use_stage = TRUE)’
to include subseries in ICES format data runs; 
for ‘external’ format runs, if the input data file includes a column named ‘subseries’, the
data in this column will be used to define subseries, to exclude subseries runs this 
column can be omitted or renamed e.g. to ‘nosubseries’ 

# Prepare data for next stage

Get correct variables and streamline the data files

```{r amap-prepare}
biota_data <- tidy_data(biota_data)
```

# Construct timeseries

For each timeseries, use the basis which is reported most often in the data

```{r amap-timeseries}
biota_timeseries <- create_timeseries(
  biota_data,
  determinands = ctsm_get_determinands(biota_data$info),
  determinands.control = NULL,
  oddity_path = "oddities",
  return_early = FALSE,
  print_code_warnings = FALSE,
  get_basis = get_basis_most_common,
  normalise = FALSE,
  normalise.control = list()
)
```

# Assessment

Main runs

```{r amap-assessment}
biota_assessment <- run_assessment(
  biota_timeseries,
  subset = NULL,
  AC = NULL,
  get_AC_fn = NULL,
  recent_trend = 20L,
  parallel = FALSE
)
```

Use the code below if it takes a long time to run

```r
biota_assessment <- run_assessment(
  biota_timeseries,
  subset = NULL,
  AC = NULL,
  get_AC_fn = NULL,
  recent_trend = 20L,
  parallel = TRUE
)
```

## Check convergence

```{r amap-convergence}
check_assessment(biota_assessment, save_result = FALSE)
```

# Summary files

This writes the summary data to a file in `output/example_external_data`.

```{r amap-summary}
summary.dir <- file.path(working.directory, "output", "example_external_data")

if (!dir.exists(summary.dir)) {
  dir.create(summary.dir, recursive = TRUE)
} 

write_summary_table(
  biota_assessment,
  output_file = "biota-FO-PW-test-output.csv",   # NB, file will be overwritten so change name as appropriate to retain results
  output_dir = summary.dir,
  export = TRUE,
  determinandGroups = NULL,
  classColour = NULL,
  collapse_AC = NULL
)
```

# Graphics output

Plots assessment with either data (file_type = "data") or annual index 
(file_type = "index") or both (default)

The plot function writes output to `output_dir` directory (must exist); with these
settings all plots are output as .png formatted graphics; function can be omitted to 
avoid graphical output; changing "png" to "pdf" in above statement will output graphics 
in PDF (vector) format.

Can subset assessment based on variables in either timeSeries or stations 
components of object: commonly by determinand, matrix, species, station_code 
or station_name; can also use the series identifier in row.names(timeSeries)
if subset is NULL (default), all timeseries are plotted (can take some time)

Graphics plots are written to files in `output/graphics`.

```{r amap-graphics1}
graphics.dir <- file.path(working.directory, "output", "graphics")

if (!dir.exists(graphics.dir)) {
  dir.create(graphics.dir, recursive = TRUE)
} 

plot_assessment(
  biota_assessment,
  subset = NULL ,
  output_dir = summary.dir,
  file_type = c("data", "index"),
  file_format = c("png" )
)
```

The above code will write a summary file for the run concerned. 
Checksums for the four runs described in this example are as follows:

