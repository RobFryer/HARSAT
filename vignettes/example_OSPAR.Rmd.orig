---
title: "OSPAR example usage"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{OSPAR example usage}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  error = TRUE
)
```

# Introduction

This vignette shows how to do an assessment following the approach used by  
OSPAR in their 2022 assessment for the 2023 Qaulity Status Report. The example
assumes familiarity with the HELCOM vignette and mostly describes features that 
differ from the HELCOM approach.

The data were extracted from the ICES data base using the XHAT facilities on
the [ICES webservice](https://dome.ices.dk/api/swagger/index.html). The data
were extracted on 28 August 2023 and were filtered using is_ospar_area = TRUE.
The data were subsequently reduced in size to make them
more manageable for this example. **The data have not been scrutinised by data 
assessors so their use, and the results below, must be treated as illustrative 
only; in particular, they should not be used for any formal reporting**.

First, we need to set up the environment by loading the `harsat` library 
(assuming you have already installed
it, as covered in the [Getting Started](/harsat.html) guide).

```{r}
library(harsat)
```

We set up our main directory to find
the data files. If you use your own data files, you will need to point to
a directory containing a copy. We usually do this by putting our data files
in a directory `data`, and information files in a directory `information`,
but you can use any directory for these.

```{r, echo=FALSE,results='asis'}
library(rprojroot)
working.directory <- is_r_package$find_file()
cat("```r\n")
cat("working.directory <- '", working.directory, "'\n", sep="");
cat("```\n")
```

# Water assessment

The OSPAR water assessment is very similar to the HOLAS assessment. The main 
difference is that more determinands are assessed which means that 
`determinands.control` needs to do more work in `create_timeseries()`. 

```{r ospar-water-data}
water_data <- read_data(
  compartment = "water",
  purpose = "OSPAR",
  contaminants = "water.txt",
  stations = "stations.txt",
  data_dir = file.path(working.directory, "data", "example_OSPAR"),
  info_dir = file.path(working.directory, "information", "OSPAR_2022"),
  extraction = "2023/08/23"
)

water_data <- tidy_data(water_data)
```

```{r ospar-water-timeseries}
water_timeseries <- create_timeseries(
  water_data,
  determinands.control = list(
    CHR = list(det = "CHRTR", action = "replace"),
    BBKF = list(det = c("BBF", "BKF", "BBJF", "BBJKF"), action = "bespoke"),
    PFOS = list(det = c("N-PFOS", "BR-PFOS"), action = "sum"),
    CB138 = list(det = c("CB138+163"), action = "replace"),
    HCEPX = list(det = c("HCEPC", "HCEPT"), action = "sum"), 
    HCH = list(det = c("HCHA", "HCHB", "HCHG"), action = "sum")
  )
)
```

```{r ospar-water-assessment}
water_assessment <- run_assessment(
  water_timeseries, 
  AC = "EQS", 
  parallel = TRUE
)

check_assessment(water_assessment)
```

```{r ospar-summary-directory}
summary.dir <- file.path(working.directory, "output", "example_OSPAR")
if (!dir.exists(summary.dir)) {
  dir.create(summary.dir, recursive = TRUE)
}
```

```{r ospar-water-summary}
write_summary_table(
  water_assessment,
  determinandGroups = list(
    levels = c(
      "Metals", "Organotins", "PAH_parent",  "Organofluorines", 
      "Chlorobiphenyls", "Organochlorines", "Pesticides"
    ),  
    labels = c(
      "Metals", "Organotins", "PAH parent compounds", "Organofluorines", 
      "Polychlorinated biphenyls", "Organochlorines (other)", "Pesticides"
    )
  ),
  symbology = list(
    colour = list(
      below = c("EQS" = "green"), 
      above = c("EQS" = "red"), 
      none = "black"
    )
  ),
  collapse_AC = list(EAC = "EQS"),
  output_dir = summary.dir
)
```

Now let's look at the `water_summary.csv` file:

```{r ospar-water-summary-render,echo=FALSE}
summary.data <- read.csv(file.path(summary.dir, "water_summary.csv"))
knitr::kable(summary.data, format = "html", table.attr = "class=\'datatable\'")
```

# Sediment assessment

The main differences in the sediment assessment relate to the normalisation
procedure in `create_timeseries()` and the use of multiple thresholds in 
`run_assessment()`.  


```{r ospar-sediment-data}
sediment_data <- read_data(
  compartment = "sediment", 
  purpose = "OSPAR",
  contaminants = "sediment.txt", 
  stations = "stations.txt", 
  data_dir = file.path(working.directory, "data", "example_OSPAR"),
  info_dir = file.path(working.directory, "information", "OSPAR_2022"), 
  extraction = "2023/08/23"
)  
sediment_data <- tidy_data(sediment_data)
```

A customised function `normalise_sediment_OSPAR()` has been written to implement 
the OSPAR normalisation procedure. This is necessary because the pivot values 
used for normalising metals are region-specific. That aside, the procedure is
straightforward: all metals are normalised to 5% aluminium and all organics are 
normalised to 2.5% organic carbon, unless the samples were taken in the Iberian 
Coast or Gulf of Cadiz OSPAR subregions, in which case the concentrations are 
not normalised.

The TEFs for the WHO TEQ for dioxins, furans and planar PCBs (labelled TEQDFP) 
are the values for the secondary poisoning QS. 

```{r ospar-sediment-timeseries}
sediment_timeseries <- create_timeseries(
  sediment_data,
  determinands.control = list(
    CHR = list(det = "CHRTR", action = "replace"),
    BBKF = list(det = c("BBF", "BKF", "BBJF", "BBJKF"), action = "bespoke"),
    NAPC1 = list(det = c("NAP1M", "NAP2M"), action = "sum"),
    BD154 = list(det = "PBB153+BD154", action = "replace"),
    HBCD = list(det = c("HBCDA", "HBCDB", "HBCDG"), action = "sum"),
    CB138 = list(det = c("CB138+163"), action = "replace"),
    CB156 = list(det = c("CB156+172"), action = "replace"),
    TEQDFP = list(
      det = names(info_TEF$DFP_environmental), 
      action = "bespoke", 
      weights = info_TEF$DFP_environmental
    ),
    HCEPX = list(det = c("HCEPC", "HCEPT"), action = "sum")
  ),
  normalise = normalise_sediment_OSPAR,
  normalise.control = list(
    metals = list(method = "pivot", normaliser = "AL", value = 5.0), 
    organics = list(method = "simple", normaliser = "CORG", value = 2.5),
    exclude = expression(ospar_subregion %in% c("Iberian Coast", "Gulf of Cadiz"))
  )
)
```

Five thresholds are applied. The Background Assessment Concentrations (BACs) 
differ between ospar_subregions. To see how that is implemented, look at the 
`thresholds_sediment.csv` file.


```{r ospar-sediment-assessment}
sediment_assessment <- run_assessment(
  sediment_timeseries, 
  AC = c("BAC", "EAC", "EQS", "ERL", "FEQG"),
  parallel = TRUE
)

check_assessment(water_assessment)
```


```{r ospar-sediment-summary}
write_summary_table(
  sediment_assessment,
  determinandGroups = list(
    levels = c(
      "Metals", "Organotins", "PAH_parent", "PAH_alkylated",  
      "PBDEs", "Organobromines", "Chlorobiphenyls", "Dioxins", 
      "Organochlorines"
    ),
    labels = c(
      "Metals", "Organotins", "PAH parent compounds", "PAH alkylated compounds", 
      "Polybrominated diphenyl ethers", "Organobromines (other)", 
      "Polychlorinated biphenyls", "Dioxins", "Organochlorines (other)"
    )
  ),
  symbology = list(
    colour = list(
      below = c(
        "BAC" = "blue", 
        "ERL" = "green", 
        "EAC" = "green", 
        "EQS" = "green", 
        "FEQG" = "green"
      ),
      above = c(
        "BAC" = "orange", 
        "ERL" = "red", 
        "EAC" = "red", 
        "EQS" = "red", 
        "FEQG" = "red"
      ),
      none = "black"
    )
  ),
  collapse_AC = list(BAC = "BAC", EAC = c("EAC", "ERL", "EQS", "FEQG")),
  output_dir = summary.dir
)
```

Now let's look at the `sediment_summary.csv` file:

```{r ospar-sediment-summary-render,echo=FALSE}
summary.data <- read.csv(file.path(summary.dir, "sediment_summary.csv"))
knitr::kable(summary.data, format = "html", table.attr = "class=\'datatable\'")
```

# Biota assessment

The OSPAR biota assessment procedure differs in two ways from the HELCOM 
procedure. First, many more determinands are assessed, including a greater set 
of biological effects (although imposex measurements have been exluded from 
this example and will be the topic of a later vignette). Second, the basis of 
the assessment is far more complicated. The example below also shows how you 
can break up the modelling stage into several parts. This is sometimes 
necessary if you have a lot of timeseries and you hit memory limitations in R. 

Note that the threshold file is currently incomplete. This is being actively 
worked on.

```{r ospar-biota-data}
biota_data <- read_data(
  compartment = "biota",
  purpose = "OSPAR",
  contaminants = "biota.txt",
  stations = "stations.txt",
  data_dir = file.path(working.directory, "data", "example_OSPAR"),
  info_dir = file.path(working.directory, "information", "OSPAR_2022"), 
  extraction = "2023/08/23"
)
biota_data <- tidy_data(biota_data)
```

OSPAR typically assesses contaminant concentrations in shellfish on a dry 
weight basis, metal concentrations in fish on a wet weight basis, and most
organic concentrations in fish on either a wet weight or lipid weight basis, 
depending on the typical lipid content of the fish and tissue. There are also
rules for birds and mammals. This is dealt with using the customised function
`get_basis_biota_OSPAR()`. 


```{r ospar-biota-timeseries}

# ad-hoc fix to remove SURVT data for now

biota_data$info$determinand["SURVT", "biota_assess"] <- FALSE

biota_timeseries <- create_timeseries(
  biota_data,
  determinands.control = list(
    CHR = list(det = "CHRTR", action = "replace"),
    BBKF = list(det = c("BBF", "BKF", "BBJF", "BBJKF"), action = "bespoke"),
    NAPC1 = list(det = c("NAP1M", "NAP2M"), action = "sum"),
    BD154 = list(det = "PBB153+BD154", action = "replace"),
    SBDE6 = list(
      det = c("BDE28", "BDE47", "BDE99", "BD100", "BD153", "BD154"), 
      action = "sum"
    ),
    HBCD = list(det = c("HBCDA", "HBCDB", "HBCDG"), action = "sum"),
    PFOS = list(det = c("N-PFOS", "BR-PFOS"), action = "sum"),
    PFHXS = list(det = c("N-PFHXS", "BR-PFHXS"), action = "sum"),
    CB138 = list(det = c("CB138+163"), action = "replace"),
    CB156 = list(det = c("CB156+172"), action = "replace"),
    SCB6 = list(
      det = c("CB28", "CB52", "CB101", "CB138", "CB153", "CB180"), 
      action = "sum"
    ),
    SCB7 = list(
      det = c("CB28", "CB52", "CB101", "CB118", "CB138", "CB153", "CB180"), 
      action = "sum"
    ),
    TEQDFP = list(
      det = names(info_TEF$DFP_environmental), 
      action = "bespoke", 
      weights = info_TEF$DFP_environmental
    ),
    HCEPX = list(det = c("HCEPC", "HCEPT"), action = "sum"),
    HCH = list(det = c("HCHA", "HCHB", "HCHG"), action = "sum"),
    "LIPIDWT%" = list(det = c("EXLIP%", "FATWT%"), action = "bespoke")
  ), 
  get_basis = get_basis_biota_OSPAR
)
```

Here, we demonstrate how to split up the modelling stage of the assessment into
several parts. The call to `run_assessment()` only assesses the metal time series
(as specified by the metals in `wk_metals`). The call to `update_assessment()` 
then assesses all the remaining time series. In general, you can subset both
`run_assessment()` and `update_assessment()` using any column in the time series
component of `biota_timeseries`; this includes `determinand`, `matrix`, 
`species` and, as a special case, `series`, if you just want to update
one or two time series. The latter is particularly useful if a 
series has not converged and you want to rerun that series with different 
optimisation controls (subject of a separate vignette).

The application of thresholds is also more complicated and can not be handled by 
the standard routines. For example, Background Assessment Concentrations for 
cadmium and lead in fish are only applied to species / tissue combinations where 
the lipid content is $>=$ 3%. This is dealt with by using the customised 
function `get_AC_biota_OSPAR()`.


```{r ospar-biota-assessment}
wk_metals <- 
  c("AG", "AS", "CD", "CO", "CR", "CU", "HG", "NI", "PB", "SE", "SN", "ZN")

biota_assessment <- run_assessment(
  biota_timeseries, 
  subset = determinand %in% wk_metals,
  AC = c("BAC", "NRC", "EAC", "FEQG", "LRC", "QSsp", "MPC", "QShh"),
  get_AC_fn = get_AC_biota_OSPAR,
  parallel = TRUE
)

biota_assessment <- update_assessment(
  biota_assessment, 
  subset = !determinand %in% wk_metals,
  parallel = TRUE
)
```

One time series has not converged. (The parameter estimates are fine, but the
standard errors are not available - if you look at the data, you will see why
the routines struggle with this time series.) The code below tweaks the 
arguments of the numerical differencing routine that calculates the standard 
errors. Dealing with non-converged timeseries is a topic for a future vignette.


```{r ospar-biota-check-assessment}
check_assessment(biota_assessment)

biota_assessment <- update_assessment(
  biota_assessment, 
  subset = series == "5031 BBKF Mytilus edulis SB",
  hess.d = 0.0001, hess.r = 8
)

check_assessment(biota_assessment)
```



We now write the summary table. Here the symbology is based on environmental 
thresholds. A separate call would be needed to get the symbology based on health 
thresholds. The symbology functionality is still under development and it is 
intended to allow both sets of symbologies to be calculated with a single call.


```{r ospar-biota-summary}
write_summary_table(
  biota_assessment,
  determinandGroups = list(
    levels = c(
      "Metals", "Organotins",
      "PAH_parent", "PAH_alkylated", "Metabolites",
      "PBDEs", "Organobromines",
      "Organofluorines",
      "Chlorobiphenyls", "Dioxins", "Organochlorines",
      "Effects"
    ),
    labels = c(
      "Metals", "Organotins",
      "PAH parent compounds", "PAH alkylated compounds", "PAH metabolites",
      "Polybrominated diphenyl ethers", "Organobromines (other)",
      "Organofluorines",
      "Polychlorinated biphenyls", "Dioxins", "Organochlorines (other)",
      "Biological effects (other)"
    )
  ),
  symbology = list(
    colour = list(
      below = c(
        "BAC" = "blue",
        "NRC" = "blue",
        "EAC" = "green", 
        "FEQG" = "green",
        "LRC" = "green", 
        "QSsp" = "green"
      ),
      above = c(
        "BAC" = "orange", 
        "NRC" = "orange", 
        "EAC" = "red", 
        "FEQG" = "red",
        "LRC" = "red", 
        "QSsp" = "red"
      ),
      none = "black"
    )
  ),
  collapse_AC = list(
    BAC = c("BAC", "NRC"),
    EAC = c("EAC", "LRC", "QSsp"), 
    HQS = c("MPC", "QShh")
  ),
  output_dir = summary.dir
)
```

And finally, let's take a look at the `biota_summary.csv` file. 

```{r ospar-biota-summary-render,echo=FALSE}
summary.data <- read.csv(file.path(summary.dir, "biota_summary.csv"))
knitr::kable(summary.data, format = "html", table.attr = "class=\'datatable\'")
```

<link rel="stylesheet" href="https://cdn.datatables.net/1.13.5/css/dataTables.bootstrap5.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js" integrity="sha512-3gJwYpMe3QewGELv8k/BX9vcqhryRdzRMxVfq6ngyWXwo03GFEzjsUm8Q7RZcHPHksttq7/GFoxjCVUjkjvPdw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.datatables.net/1.13.5/js/dataTables.bootstrap5.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
$('.datatable').dataTable();
</script>

